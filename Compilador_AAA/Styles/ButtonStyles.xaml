<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:fa="http://schemas.awesome.incremented/wpf/xaml/fontawesome.sharp">
    <!--Control bar button-->
    <Style x:Key="controlButton"
           TargetType="Button">

        <!--Normal button style-->
        <Setter Property="Width"
                Value="46" />
        <Setter Property="Height"
                Value="32" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Foreground"
                Value="Black" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="0">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--Mouse over back color-->
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Background"
                        Value="{DynamicResource BrightDarkGrayMainBG}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!--Menu button icon-->
    <Style x:Key="controlButtonIcon"
           TargetType="fa:IconImage">
        <Setter Property="Foreground"
                Value="White" />
        <Setter Property="Width"
                Value="9" />
        <Setter Property="Height"
                Value="1.5" />
        <Setter Property="Margin" Value="0,1,0,0"/>
        <Setter Property="Stretch"
                Value="Uniform" />

    </Style>
    <!--Control bar button-->
    
    <Style x:Key="controlMinMaxButtonIcon"
           TargetType="fa:IconImage">
        <Setter Property="Foreground"
                Value="White" />
        <Setter Property="Width"
                Value="11" />
        <Setter Property="Height"
                Value="11" />
        <Setter Property="Margin"
                Value="0,2,0,0" />
        <Style.Triggers>
            <!-- Trigger para cambiar el icono cuando la ventana está maximizada -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=WindowState}"
                         Value="Maximized">
                <Setter Property="Icon"
                        Value="WindowRestore" />
            </DataTrigger>
            <!-- Trigger para cambiar el icono cuando la ventana está en otro estado (normal o minimizada) -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=WindowState}"
                         Value="Normal">
                <Setter Property="Icon"
                        Value="WindowMaximize" />
            </DataTrigger>
        </Style.Triggers>
        
    </Style>
    
    <Style x:Key="controlShutDownButtonIcon"
           TargetType="Image">
        <Setter Property="Width"
                Value="16" />
        <Setter Property="Height"
                Value="16" />
        <Setter Property="Stretch"
                Value="UniformToFill" />
        <Setter Property="RenderOptions.BitmapScalingMode"
                Value="HighQuality" />
        <Setter Property="Margin"
                Value="0,2,0,0" />
    </Style>

    <!--MainPanel Margin-->
    <Style x:Key="MainPanel" TargetType="Grid">
        <Style.Triggers>
            <!-- Trigger para cambiar el icono cuando la ventana está maximizada -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=WindowState}"
                         Value="Maximized">
                <Setter Property="Margin"
                        Value="6" />
            </DataTrigger>
            <!-- Trigger para cambiar el icono cuando la ventana está en otro estado (normal o minimizada) -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=WindowState}"
                         Value="Normal">
                <Setter Property="Margin"
                        Value="0" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>